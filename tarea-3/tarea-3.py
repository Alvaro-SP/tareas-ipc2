# -*- coding: utf-8 -*-
"""3. Listas Doblemente enlazadas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xSHHekaokbI9GdAGpPiF2yKNVsay4o7n
"""

print("Nombre: Alvaro Socop Carne : 202000194")

"""# **Listas Doblemente Enlazadas**
## Definición de la clase Estudiante
"""

class estudiante:
  def __init__(self, carne, nombre, edad, direccion, telefono, email, carrera, puesto): #el self es como el this de java, indicandole que los atributos pertenecen a esa clase
    self.carne = carne
    self.nombre = nombre
    self.edad = edad
    self.direccion = direccion
    self.telefono = telefono
    self.email = email
    self.carrera = carrera
    self.puesto = puesto

"""### **Definición de la clase nodo**"""

class nodo:
  def __init__(self, estudiante=None, siguiente=None, anterior=None): #al construir funciones constructoras se le puede dar valores a los parametros que nosotros enviemos
    self.estudiante = estudiante
    self.siguiente = siguiente
    self.anterior = anterior

"""**Definición de la clase Lista Doblemente Enlazada**"""

#creación , insercion, eliminación, busqueda
class lista_doble:
  def __init__(self): #cuando la lista está vacía, solo tendriamos la lista con un elemento sin nada
    #el elemento esta esperando a que se le agreguen nodos transformandolo en el nodo que se le envie como primero.
    self.primero = None #al principio apunta a vacio
  def insertar(self, est): #valor que se le va a registrar al nodo
    if self.primero is None:
      self.primero=nodo(estudiante=est) #estudiante es la variable que se encuentra en la clase Nodo

    else:
      actual = nodo(estudiante=est, siguiente=self.primero) 
      self.primero.anterior = actual
      self.primero=actual
     
  def recorrer(self):
    if self.primero is None:
      return
    actual=self.primero
    print("carne: ", actual.estudiante.carne, "nombre: ", actual.estudiante.nombre, "email: ", actual.estudiante.email, "-->")
    while actual.siguiente:
      actual=actual.siguiente
      print("carne: ", actual.estudiante.carne, "nombre: ", actual.estudiante.nombre, "email: ", actual.estudiante.email, "-->")
  
  def eliminar(self, carne):
    actual=self.primero
    while actual:
      if actual.estudiante.carne==carne:
        if actual.anterior:
          if actual.siguiente:
            actual.anterior.siguiente=actual.siguiente
            actual.siguiente.anterior=actual.anterior
          else:
            actual.anterior.siguiente=None
            actual.anterior=None
        else:
          if actual.siguiente:
            self.primero=actual.siguiente
            actual.siguiente.anterior=None
          else:
            self.primero=None
        return True
      else:
        actual=actual.siguiente
    return False

  def search_node(self, carne):
    actual=self.primero
    while actual:
      if actual.estudiante.carne==carne:
        print("Se ha encontrado: ")
        print("carne: ", actual.estudiante.carne, "nombre: ", actual.estudiante.nombre, "email: ", actual.estudiante.email, "-->")
        if actual.anterior:
          if actual.siguiente:
            actual.anterior.siguiente=actual.siguiente
            actual.siguiente.anterior=actual.anterior
          else:
            actual.anterior.siguiente=None
            actual.anterior=None
        else:
          if actual.siguiente:
            self.primero=actual.siguiente
            actual.siguiente.anterior=None
          else:
            self.primero=None
        return True
      else:
        actual=actual.siguiente
    print("No se ha encontrado ese carne")
    return False

"""### **Creacion de objetos Estudiante**"""

e1=estudiante(202000194, "Alvaro Socop",20, "CASA", 57707472, "socop2412@gmail.com", "Ingenieria en Sistemas", "Estudiante")
e2=estudiante(123456, "Gerardy Mandela", "Cayala",15, 65849852, "6515198@gmail.com", "Ingenieria en Mecatrónica", "Estudiante")
e3=estudiante(4444444, "Albert Einstein",18, "Villa Hermosa", 64198189, "6549819@gmail.com", "Ingenieria Orgánica", "Estudiante")
e4=estudiante(123456789, "Miguel Cardona",16, "Villa Nueva", 9849819812, "65195898@gmail.com", "Ingenieria Química", "Estudiante")

"""### **Inserción*"""

lista_e = lista_doble()
lista_e.insertar(e1)
lista_e.insertar(e2)
lista_e.insertar(e3)
lista_e.insertar(e4)

"""### **Recorrer Lista**"""

lista_e.recorrer()

"""Nodos:
1er > 2do > 3ero

Gerson > Karen > Luis

### **Eliminar un nodo del medio lista**
"""

lista_e.eliminar(123456789)
lista_e.recorrer()

"""### **Eliminar el ultimo nodo de mi lista**"""

lista_e.eliminar(202000194)
lista_e.eliminar(4444444)
lista_e.eliminar(123456)

lista_e.recorrer()

"""### **Eliminar nodo a nodo de la lista**"""

lista_e.insertar(e1)
lista_e.insertar(e2)
lista_e.insertar(e3)
lista_e.insertar(e4)

lista_e.eliminar(123456789)

lista_e.recorrer()

lista_e.eliminar(4444444)
lista_e.recorrer()

lista_e.eliminar(123456)
lista_e.recorrer()

lista_e.eliminar(202000194)
lista_e.recorrer()

lista_e.insertar(e1)
lista_e.insertar(e2)
lista_e.insertar(e3)
lista_e.insertar(e4)

"""## **Buscar un nodo lista**"""

lista_e.search_node(202000194)

lista_e.search_node("hola")

